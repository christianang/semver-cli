// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/blang/semver"
)

type Semver struct {
	MakeStub        func(s string) (semver.Version, error)
	makeMutex       sync.RWMutex
	makeArgsForCall []struct {
		s string
	}
	makeReturns struct {
		result1 semver.Version
		result2 error
	}
	makeReturnsOnCall map[int]struct {
		result1 semver.Version
		result2 error
	}
	CompareStub        func(v1, v2 semver.Version) int
	compareMutex       sync.RWMutex
	compareArgsForCall []struct {
		v1 semver.Version
		v2 semver.Version
	}
	compareReturns struct {
		result1 int
	}
	compareReturnsOnCall map[int]struct {
		result1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Semver) Make(s string) (semver.Version, error) {
	fake.makeMutex.Lock()
	ret, specificReturn := fake.makeReturnsOnCall[len(fake.makeArgsForCall)]
	fake.makeArgsForCall = append(fake.makeArgsForCall, struct {
		s string
	}{s})
	fake.recordInvocation("Make", []interface{}{s})
	fake.makeMutex.Unlock()
	if fake.MakeStub != nil {
		return fake.MakeStub(s)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.makeReturns.result1, fake.makeReturns.result2
}

func (fake *Semver) MakeCallCount() int {
	fake.makeMutex.RLock()
	defer fake.makeMutex.RUnlock()
	return len(fake.makeArgsForCall)
}

func (fake *Semver) MakeArgsForCall(i int) string {
	fake.makeMutex.RLock()
	defer fake.makeMutex.RUnlock()
	return fake.makeArgsForCall[i].s
}

func (fake *Semver) MakeReturns(result1 semver.Version, result2 error) {
	fake.MakeStub = nil
	fake.makeReturns = struct {
		result1 semver.Version
		result2 error
	}{result1, result2}
}

func (fake *Semver) MakeReturnsOnCall(i int, result1 semver.Version, result2 error) {
	fake.MakeStub = nil
	if fake.makeReturnsOnCall == nil {
		fake.makeReturnsOnCall = make(map[int]struct {
			result1 semver.Version
			result2 error
		})
	}
	fake.makeReturnsOnCall[i] = struct {
		result1 semver.Version
		result2 error
	}{result1, result2}
}

func (fake *Semver) Compare(v1 semver.Version, v2 semver.Version) int {
	fake.compareMutex.Lock()
	ret, specificReturn := fake.compareReturnsOnCall[len(fake.compareArgsForCall)]
	fake.compareArgsForCall = append(fake.compareArgsForCall, struct {
		v1 semver.Version
		v2 semver.Version
	}{v1, v2})
	fake.recordInvocation("Compare", []interface{}{v1, v2})
	fake.compareMutex.Unlock()
	if fake.CompareStub != nil {
		return fake.CompareStub(v1, v2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.compareReturns.result1
}

func (fake *Semver) CompareCallCount() int {
	fake.compareMutex.RLock()
	defer fake.compareMutex.RUnlock()
	return len(fake.compareArgsForCall)
}

func (fake *Semver) CompareArgsForCall(i int) (semver.Version, semver.Version) {
	fake.compareMutex.RLock()
	defer fake.compareMutex.RUnlock()
	return fake.compareArgsForCall[i].v1, fake.compareArgsForCall[i].v2
}

func (fake *Semver) CompareReturns(result1 int) {
	fake.CompareStub = nil
	fake.compareReturns = struct {
		result1 int
	}{result1}
}

func (fake *Semver) CompareReturnsOnCall(i int, result1 int) {
	fake.CompareStub = nil
	if fake.compareReturnsOnCall == nil {
		fake.compareReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.compareReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *Semver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.makeMutex.RLock()
	defer fake.makeMutex.RUnlock()
	fake.compareMutex.RLock()
	defer fake.compareMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Semver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
